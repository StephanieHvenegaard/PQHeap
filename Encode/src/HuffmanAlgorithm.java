

public class HuffmanAlgorithm {

    // recursive function to print the 
    // huffman-code through the tree traversal. 
    // Here s is the huffman - code generated. 
    public static void printCode(HuffmanNode root, String s) {

        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left == null && root.right == null) {

            // c is the character in the node 
            System.out.println(root.key + ":" + s);

            return;
        }
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    // main function 
    public void buildtree(int[] bytefreq){
        // creating a priority queue q. 
        // makes a min-priority queue(min-heap). 
        PQHeap q = new PQHeap(256);

        for (int i = 0; i < bytefreq.length; i++) {

            // creating a Huffman node object 
            // and add it to the priority queue. 
            HuffmanNode hn = new HuffmanNode();

            hn.key = i;
            hn.data = bytefreq[i];

            hn.left = null;
            hn.right = null;

            // add functions adds 
            // the huffman node to the queue. 
            q.insert(hn);
        }

        // create a root node 
        HuffmanNode root = null;

        // Here we will extract the two minimum value 
        // from the heap each time until 
        // its size reduces to 1, extract until 
        // all the nodes are extracted. 
        while (q.size() > 1) {

            // first min extract. 
            HuffmanNode x = q.extractMin();

            // second min extarct. 
            HuffmanNode y =q.extractMin();

            // new node f which is equal 
            HuffmanNode f = new HuffmanNode();

            // to the sum of the frequency of the two nodes 
            // assigning values to the f node. 
            f.data = x.data + y.data;
            f.key = -1;

            // first extracted node as left child. 
            f.left = x;

            // second extracted node as the right child. 
            f.right = y;

            // marking the f node as the root node. 
            root = f;

            // add this node to the priority-queue. 
            q.insert(f);
        }

        // print the codes by traversing the tree 
        printCode(root, "");
    }
} 

// This code is contributed by Kunwar Desh Deepak Singh 
